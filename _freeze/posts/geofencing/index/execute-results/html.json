{
  "hash": "0b04e69b32435e3e2545bab2e1248fa4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Geofencing with R for Enhanced Data Collection in Kobotoolbox\"\nsubtitle: \"Geofencing is a powerful tool that combines location technology with data analysis allowing you to automate and check data collection within predefined geographical boundaries.\"\nauthor: \"Oluwatosin Orenaike\"\ndate: \"2024-01-05\"\ncategories: [R, Kobotoolbox, Data Collection]\nimage: thumbnail.png\noutput:\n  html_document:\n    toc: true\n    df_print: paged\n    # keep_md: yes\n    number_sections: true\n  pdf_document:\n    toc: true\n    keep_md: yes\n    number_sections: true\n  word_document:\n    toc: true\n    keep_md: yes\n    number_sections: true\n---\n\n\n\n# **Introduction**\n\nGeofencing is a powerful tool that combines location technology with data analysis, allows you to automate data collection within predefined geographical boundaries. I will show you a step-by-step guide, using R, to integrate geofencing with Kobotoolbox and boost your data collection efficiency. This process involves two major steps:\n\n1. Getting the vertex for your location of interest.\n2. Uploading vertex to KoboToolbox (link to a video).\n\nImagine this:\n\n- You enter a designated study area, and data collection triggers automatically. No more remembering to press buttons or check locations!\n- Your data comes from precisely where you need it, thanks to the power of geofencing boundaries. No more worrying about stray data points or missed locations!\n- Kobotoolbox forms adapt based on location, with possibilities of dynamically changing questions or displaying relevant information for specific areas.\n\nLet's dive in!\n\n\n\n\n\n\n# **Load data**\n\n## **Step 1: Shape Up Your Boundaries**\n\nFirst, define your geofencing areas. Grab the shapefiles for your target zones — these handy files store information about geographical boundaries. Our example uses a sample shapefile named \"Sample_locations\" with details like Sites, Zones, House, and Blocks. Download it here: [link to your sample shapefile]\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load your shapefile (ensure you provide the correct path)\nSample_locations <- st_read(\"./data/shp_file/Sample_locations.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Sample_locations' from data source \n  `C:\\Users\\orenaike\\OneDrive\\01_ORENAIKE\\02_CAREER_AND_DEVELOPMENTS\\01_Schools\\Web_Development\\Portfolio\\otomisin.github.io\\posts\\geofencing\\data\\shp_file\\Sample_locations.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 6 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 605820.6 ymin: 853074.4 xmax: 606177 ymax: 853555.9\nProjected CRS: WGS 84 / UTM zone 35N\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check and plot the data table to understand its structure\nprint(st_drop_geometry(Sample_locations))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  OBJECTID Zone_ Block   House\n1        1     B     1 House A\n2        2     B     2 House B\n3        3     A     1 House C\n4        4     A     2 House D\n5        5     A     3 House E\n6        6     A     4 House F\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot the locations\nSample_locations |>\n  ggplot() +\n  geom_sf() +\n  geom_label(aes(x = st_coordinates(st_centroid(geometry))[, 1], \n                 y = st_coordinates(st_centroid(geometry))[, 2], \n                 label = House), \n             size = 3, fill = \"lightblue\", color = \"black\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n.\n\n\n## **Step 2: Extract Those Coordinates**\n\nNow, use R's **`st_geometry`** function to extract the precise latitude and longitude values from your shapefile. We’ll store these coordinates in a separate data frame for easier manipulation.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract coordinates using the same Coordinate Reference System (CRS) as the original data\npolygon_vertices <- lapply(st_geometry(Sample_locations), st_coordinates)\n\n# Map each polygon_vertices list to its OBJECTID row\nmapped_data_v1 <- Map(function(vertices, objectid) {\n  data.frame(OBJECTID = objectid,\n             p_longitude = vertices[, \"X\"],\n             p_latitude = vertices[, \"Y\"])\n}, polygon_vertices, Sample_locations$OBJECTID)\n\n# Combine the mapped data frames into a single data frame\nmapped_data_v1 <- do.call(rbind, mapped_data_v1)\n\n# Integrate the mapped data with the original shapefile data\nSample_locations_points <- Sample_locations |>\n  as.data.frame() |>\n  left_join(mapped_data_v1, by = \"OBJECTID\") |>\n  st_as_sf(coords = c(\"p_longitude\", \"p_latitude\"), crs = st_crs(Sample_locations))\n\n\nsummary(Sample_locations_points)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    OBJECTID        Zone_              Block              House          \n Min.   :1.000   Length:66          Length:66          Length:66         \n 1st Qu.:1.000   Class :character   Class :character   Class :character  \n Median :2.000   Mode  :character   Mode  :character   Mode  :character  \n Mean   :2.667                                                           \n 3rd Qu.:4.000                                                           \n Max.   :6.000                                                           \n          geometry \n POINT        :66  \n epsg:32635   : 0  \n +proj=utm ...: 0  \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n\n## **Step 3: Generate Your ID Nodes**\n\n::: {.cell}\n\n```{.r .cell-code}\nSample_locations_points_v1 <- Sample_locations_points %>%\n  group_by(Block) %>%\n  mutate(id_node = paste0(Block, \"_\", row_number())) %>%\n  ungroup()\n\n# View the points and polygons on a map\nggplot() +\n  geom_sf(data = Sample_locations) +\n  geom_label(data = Sample_locations_points_v1,\n             aes(x = st_coordinates(st_centroid(geometry))[, 1],\n                 y = st_coordinates(st_centroid(geometry))[, 2],\n                 label = House),\n             size = 3, fill = \"lightblue\", color = \"black\") +\n  geom_sf(data = Sample_locations_points_v1) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n## **Step 5: Export the Spatial Data for Kobotoolbox Integration**\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(Sample_locations_points_v1, \"./Sample_locations_points_v1.csv\")\n\n# The exported CSV file can now be used in Kobotoolbox for enhanced data collection with geofencing\n```\n:::\n\n**Step 5: Integrate with Kobotoolbox**\n\nCongratulations! You now have a spatial data frame enriched with precise coordinates and unique identifiers, ready to be seamlessly integrated with Kobotoolbox. Unleash the power of location-aware data collection, with automatic form triggers and data collection tailored to specific geographical zones.\n\n**Beyond the Code:** Here are some additional tips to take your geofencing journey to the next level:\n\n- **Real-world examples:** Think about using geofencing to study air quality in specific city districts, automatically triggering data collection at designated times.\n- **Challenges and solutions:** Consider potential challenges like battery drain on data collectors and GPS limitations. Optimize data collection forms and schedule strategically to mitigate these.\n- **Dive deeper:** Explore our GitHub repository (link [here](https://github.com/Otomisin/OPPWeek/blob/main/Geofencing/README.md)) for the full code buffet and detailed tutorials to become a geofencing master.\n\nDon’t let your data collection be stuck in the manual age! Leverage the magic of geofencing with R and Kobotoolbox to supercharge your fieldwork efficiency and precision and experience the power of automation, precision, and streamlined workflows!\n\nYou can check how to integrate the output into Kobotoolbox. Check this [video](https://www.youtube.com/watch?v=yg26PLctcEQ) on how to.\n\n# **Conclusion**\n\nDon't let your data collection be stuck in the manual age! Leverage the magic of geofencing with R and Kobotoolbox to supercharge your fieldwork efficiency and precision, experiencing the power of automation, precision, and streamlined workflows.\n\nFor detailed integration with Kobotoolbox, check this video on how to.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}